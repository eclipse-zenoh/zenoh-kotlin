# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: "0 6 * * 1-5"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ["${{ matrix.os }}"]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26
          add-to-path: false
          link-to-sdk: true

      - name: Install Rust toolchain
        run: |
          rustup show
          rustup component add rustfmt clippy

      - name: Cargo Format
        working-directory: zenoh-jni
        run: cargo fmt --all --check

      - name: Clippy Check
        working-directory: zenoh-jni
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for feature leaks
        working-directory: zenoh-jni
        run: cargo test --no-default-features

      - name: Build Zenoh-JNI
        working-directory: zenoh-jni
        run: cargo build

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Gradle Test
        run: gradle jvmTest --info

  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'

  # Publish snapshot packages. These jobs will only be triggered when the CI is executed on main.
  publish_jvm_snapshot_package:
    name: Publish JVM snapshot package
    if: github.ref == 'refs/heads/main'
    needs: ci
    uses: ./.github/workflows/publish-jvm.yml
    permissions:
      contents: read
      packages: write
    with:
      snapshot: true

  publish_android_snapshot_package:
    name: Publish Android snapshot package
    if: github.ref == 'refs/heads/main'
    needs: ci
    uses: ./.github/workflows/publish-android.yml
    permissions:
      contents: read
      packages: write
    with:
      snapshot: true
