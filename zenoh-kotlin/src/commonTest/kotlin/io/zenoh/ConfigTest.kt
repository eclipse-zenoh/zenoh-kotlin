//
// Copyright (c) 2023 ZettaScale Technology
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
//

package io.zenoh

import io.zenoh.keyexpr.intoKeyExpr
import io.zenoh.sample.Sample
import io.zenoh.value.Value
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull

class ConfigTest {
    companion object {
        val TEST_KEY_EXP = "example/testing/keyexpr".intoKeyExpr().getOrThrow()
    }

    @Test
    fun mTLSConfigLoadingTest() {
        val configDataClient = ConfigData(
            mode = "peer",
            connect = Connect(
                endpoints = arrayListOf("tls/localhost:7447")
            ),
            transport = Transport(
                link = Link(
                    tls = Tls(
                        clientAuth = true,
                        rootCaCertificateBase64 = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTekNDQWpPZ0F3SUJBZ0lJWFROc2Q3V2NScjB3RFFZSktvWklodmNOQVFFTEJRQXdJREVlTUJ3R0ExVUUKQXhNVmJXbHVhV05oSUhKdmIzUWdZMkVnTldRek16WmpNQ0FYRFRJek1URXlPREUwTURJek0xb1lEekl4TWpNeApNVEk0TVRRd01qTXpXakFnTVI0d0hBWURWUVFERXhWdGFXNXBZMkVnY205dmRDQmpZU0ExWkRNek5tTXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3U2Q0dkcytyNjd2a2doNmp6QUxXL2hDSm8KU2hMRnhKOURpT0xtYzZmcmNZTkJhNmsvS2g2eDk1bWo0emxaczRJVk9EbnJRUUNscUhPd3lOWEJoUDhMS0FvNQpHUi90elBVOHFUSHVQcVpsd1d5aktPRnFtV1pYVlc4NWhhL2Z5MktJU21VSXJoaXJXMHVIa1B0VEhhbFlEaEU2CmhWOEp1N2lJM3RoOEtnakRpdExrU0dXc0dkdHNOZ0lwV2NSVWcvUzhidzNsNGVJb1N2RTN6Y1JpcHMwMEc4MHkKZUYycUFjYy9DVzk5K1MreUpBTGd2TXRQaVdBckJ5cnJvOUhEbFVId3d1bWxYWXIrTTZQeFNTWTJzWGNkYUowdwpvb0dMZFZDemRZZS9sNUp6V2Joanp1SHhIM01vbHBnQm45TnQ4bnpXcktSWHVkcUkyTlp4YktsTnZNbkZBZ01CCkFBR2pnWVl3Z1lNd0RnWURWUjBQQVFIL0JBUURBZ0tFTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFTQmdOVkhSTUJBZjhFQ0RBR0FRSC9BZ0VBTUIwR0ExVWREZ1FXQkJSZFNLZEhLUWdoQWtYVApQT3E0WlBnaEZjUUZXekFmQmdOVkhTTUVHREFXZ0JSZFNLZEhLUWdoQWtYVFBPcTRaUGdoRmNRRld6QU5CZ2txCmhraUc5dzBCQVFzRkFBT0NBUUVBQkpNanFYeTRoQUt6LzRQOVp2RUVtSGF6WDZBRWFoeVowZmkyNDNYaDcvRGwKaU84Nnh5c3VxejA5dEgxRXZFZ1ZRUUtlbnE3Mk9idU5uL2VZS08vNlNoRTdEcjNoeG9iaDVTS2JOU3MveE1UeApwMGQrUFh4eXA0UWRROUUyQXhiVHNoRXEwd1MvN3BBcHE4VnBDSmlscFJpZEU3MXJsU3lVUUlHaXdDYzFmMlFsCnpuYkRzdnJ4RXFDN05mSVQvRlRDSnZvV05QUUJFZzBEaDBhZTBMNkppM0MwTzZKMnUrcTB2eWN5L3A4Zk0wcjIKMEM0MWFudjRhb0UvNE1WbytSZFZMVzNtMmdHcUpZZGxjbTBTMnVtRHZLSWlyalJzZXNsVTFKWnpVbG9aMklOYgo3alZUQ0ZWeFQvMS9OTDZxRzRmeEhJbWw1UEUvZDNRVW1DalUrblpnWmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                        clientPrivateKeyBase64 = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdjRkdFFzUkJlMk9KMHhuV1AzM0RodUZCTVRVU21nNnJ1US84YzRwUTZ6RXdqVkw2CmxjUWJvRW9zK1daMS9JcCtyRmRLeXJYZi9EVVIyWmJiaENCSEZ3MzlDR1ZUK1lqWkZ3UkdGQnlacjJEMEdEMHgKU0U3ZjZyVkw4OHhKU2hMSVNzMG5lV3ZzUjViVEp3Z0NNWkRVT0VRaStYbWFrRnp1dUUxYld5NmZ3OEZaeE1ybAp5ZHdaaktjWEdsWEl5dXE0UExDdlVEU3hPUGRKRVhQMUgvd2NvZFYrSFhCQ2t1cTNvRVVMUk5OejVyZjMzNDdKCm9oYmc4V05WRHAwT1dDaU91emMweVhHZ2UzWlJ5eWEwcSszTmpJVVVTZnZUN0h5Z3BDYXVZcmtUcEFSZkxoR0EKbk9qQzI1S0hYdk90NnZwVkVmOFNFQWNQei95UE1zME5DbDF1Y3dJREFRQUJBb0lCQVFDT3BTUmc5NTMxY2RyeQpXR25TKzYybVJSbXl0bDVXVXRyZWgrTnpnZTVtWEVwVzF4Zytkc0pFalRvVnZaUGVOSi9IWjNRU3FZWmFab1FXCjFGNUZkMnk2NVBZeFRKWlFZUFdlU05hUW9BUnVNLzFZR0NzZU9YQlhkQk5QVGpTL2NHR3dKRDlrRlZieXNvZ3MKcDdCS2poMGdrczZoazBua2Z2SmtYV2pPN2xpYkI1YjVTQUNKNFU1amtoU2FCRmV3ZkwyeUFHTnBjUGl0bVorNApkUktsRWlCQVprQXphb1JiQ1JJQmlXRUFrU3VsZGFtVDFwYVRmY1MvWWthY25VcGw5UjJWbE9SYm0zZDNoU3JuCkFUOC91UWcyTEpnbWZXYzdLM1NxMXNPL2RsNGdhb25iR05SNE9OdzFTb2pBQ3NSNTk1dWJML05kcytneE9jMDAKaGQ2NE1jY1JBb0dCQVA1cEhWalY4QitNZWdmUjQycnI4YW1zaTNydlUvUXRSSm0xNi9YMTdSNHlWRXU0blZabQovRnUxNmM5TVdnZXorbmJRTlA1M3UwNW8zRDI3d1ExNDA3b1luTlNzaDVNS3ZWTkN6KzVzdHNTbFJONXJGV0lyCjc1MmtncVVyeC95MzIwK1hPelRUZzdaWkVnWUovR3BocHlibTF0VWJSVmhIQmI0TzJpeVBMa3JOQW9HQkFNQzUKdm5pcW5FT25pVFhkQ2NsUDZhZzQzRWlhZHMyRm5oNUxzcng5eGIrSmJyWC9zSHg0T2JDMTYvMFlqUDdHL29ESwpNN3duZzJFZStiWXA4SlFzQzNVM3RnRm81RW05ZTRzdFRHakhicUZhaHlQSDVoRjBRWWR0emx2UngyZmpWY21QCjY3cUttMjk2bHNEb0cxWERlcWUzOE84S2JxRUIvbWpCbE9UQUNSNC9Bb0dCQUx3ZFoxakhvQzBEeHp1L0E2U00KMy8weEcxV0VYNVIrWUdvejdVektVbEZ3cjRucDhWVHhBNHFnb1VqcDBPdy9OV1RqSVR4RHRoa05Ta1RQYnJrUwpiYVArRFFEb3JicVpSMUtvWlcyTHJ6MEtZemorL3ltL0NRZU1uQm1ibk4yTjZUa1p2dXFadDV0K2t1Z3FQQjFCCkpjS0xEN0UxMy9tZFVtNnROcithQTRYRkFvR0FaVUh5Q2pJUmtoWTNLQjZ2WXA3aTgraVVERzFqbUEzcENwL1oKRStHOUFTcHpDWnFDbnBNSU5Ja1FxVlM1MTY2enp2VHVBNkI3RFk4WndoVDgrc3k5WkdQVjg1MnB1L2liTFgrcQpVcTdkdUZiNUE5cW1UV3RZZHBCQnlNcEtTNUlNNDY4RE9tcFN5bHFOVkdOZTRVdW9hUEJpM1NVTkJQa29NdC9xCm05a3RzVDhDZ1lCNmpRSkhPT3FzVnhaU05NN1BLYmhNSUtVZEdSaytjYlhHYVYrc2dwTDNxN29nZHVKKzhRS3gKdTY4ZGFoNGt1Y0hVQzlqUzBtM3lVcEhaUmp2aGFTZk02Ky9GL2VOL0NXZ2UrMjVidFN3SXB0cDJUMEZqUU15Rwpvdk5GdlFIS1BOY0VHeUFoMFBqNHFSRW94QXVpdTRlKzQ5UTlPeWZqMGVKN1dUVVJ1d055aUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                        clientCertificateBase64 = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMRENDQWhTZ0F3SUJBZ0lJV1VZMzNyRXQ1Uk13RFFZSktvWklodmNOQVFFTEJRQXdJREVlTUJ3R0ExVUUKQXhNVmJXbHVhV05oSUhKdmIzUWdZMkVnTlRZd05tVTVNQjRYRFRJek1URXlPREUwTURJeU1Wb1hEVEkxTVRJeQpPREUwTURJeU1Wb3dGREVTTUJBR0ExVUVBeE1KYkc5allXeG9iM04wTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBdjRkdFFzUkJlMk9KMHhuV1AzM0RodUZCTVRVU21nNnJ1US84YzRwUTZ6RXcKalZMNmxjUWJvRW9zK1daMS9JcCtyRmRLeXJYZi9EVVIyWmJiaENCSEZ3MzlDR1ZUK1lqWkZ3UkdGQnlacjJEMApHRDB4U0U3ZjZyVkw4OHhKU2hMSVNzMG5lV3ZzUjViVEp3Z0NNWkRVT0VRaStYbWFrRnp1dUUxYld5NmZ3OEZaCnhNcmx5ZHdaaktjWEdsWEl5dXE0UExDdlVEU3hPUGRKRVhQMUgvd2NvZFYrSFhCQ2t1cTNvRVVMUk5OejVyZjMKMzQ3Sm9oYmc4V05WRHAwT1dDaU91emMweVhHZ2UzWlJ5eWEwcSszTmpJVVVTZnZUN0h5Z3BDYXVZcmtUcEFSZgpMaEdBbk9qQzI1S0hYdk90NnZwVkVmOFNFQWNQei95UE1zME5DbDF1Y3dJREFRQUJvM1l3ZERBT0JnTlZIUThCCkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIKL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVbmEycCtXK1VtZTVIRjd3L01jcnVGQ1VrWm9Zd0ZBWURWUjBSQkEwdwpDNElKYkc5allXeG9iM04wTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBRjZrM1dQSVB4cGkrcXdPRmlsbEVoCldYdHpWTUFNWitOZmRaVCtWZTZVNjk3SmZOaUVDQzdKSERXNUkxTWdYaHdYVEIwV1ZOR3lvSytCVlFKS0FjMCsKcm1YblpiT1hYeXFXbGZlL204VlBOMzltMWtTeXdJZ3htRUpMSmNRRG5rZFdVRExrS1p5aDAySTFHTmkzeDdaKwptYU1pQk1NcXBXWHNndG1NZlJlRkNNS3Vqam1qVE5TRnJmK01naHhjc3EzQVduTXJpYzFuQ3ltM0ZNVjk4T3pwCmZieHhYdGRpcTdRb0haaGExNGZmZTA4eUtGMW53TnVUSW9BeWVlSWJWb0pKa0s4aHh2eFhrOHRCa2JuVlpmbHQKNGNQR1RlQm11My9qckNma3RIcXUrbmFZLzhoM1NjT04xTzNoQ0JRdUp4QVVRYUxEWHNiSkNKRUkxUTBtc3FIZwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
                    )
                )
            )
        )
        val configDataServer = ConfigData(
            mode = "peer",
            listen = Listen(
                endpoints = arrayListOf("tls/localhost:7447")
            ),
            transport = Transport(
                link = Link(
                    tls = Tls(
                        clientAuth = true,
                        rootCaCertificateBase64 = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTekNDQWpPZ0F3SUJBZ0lJVmdicGJYZ3FGWjR3RFFZSktvWklodmNOQVFFTEJRQXdJREVlTUJ3R0ExVUUKQXhNVmJXbHVhV05oSUhKdmIzUWdZMkVnTlRZd05tVTVNQ0FYRFRJek1URXlPREUwTURJeU1Wb1lEekl4TWpNeApNVEk0TVRRd01qSXhXakFnTVI0d0hBWURWUVFERXhWdGFXNXBZMkVnY205dmRDQmpZU0ExTmpBMlpUa3dnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRE5QT1UzUFByV1FUOHpOcFpFd0ppS09zcWEKWkZIOXowK2lEcHJJSG96QUhxL1dIeXVqdXN4REhVNjlaRlh6UlZzWDZaYi8xandDZUt0MlpQeVM1UFVxNERxagpRa2RIQWFDNXlZT283SitSQVNxTE8wOXpPQVY0UXM2VUdraVNUWEIvdkJsa2ZFUFVLWlMzdGh6Zzk0aUlsZ0RMCmpJd1F6SGh3VWU2dXV1MU1mVFRBZWErWkJBdGY5VWNmbUVjY29rRnJ4ZEpHUk1SY2RyN1dTN0M4M2pYRVNQQjAKdTdWcm9FbEhGNDB3K0NVKzV1bDhTRVVOVXhVenVzUUR0V1BEeDJOY0VnZzNqeDByZ0RLcXNlbXZaZUVvRTZnRgp3ejIxaHFrTWFDaWNqYXROa0ZaUmtCcFdsWTB3d1dKR2QrSSsxUDE2cUJnajlVSVZ0Q3k5V2tDajN5ZHJBZ01CCkFBR2pnWVl3Z1lNd0RnWURWUjBQQVFIL0JBUURBZ0tFTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFTQmdOVkhSTUJBZjhFQ0RBR0FRSC9BZ0VBTUIwR0ExVWREZ1FXQkJTZHJhbjViNVNaN2tjWAp2RDh4eXU0VUpTUm1oakFmQmdOVkhTTUVHREFXZ0JTZHJhbjViNVNaN2tjWHZEOHh5dTRVSlNSbWhqQU5CZ2txCmhraUc5dzBCQVFzRkFBT0NBUUVBTi9yWUx6RmFUNkZsWHpqM2RscGFFYkxnZjUwM0g2TWNqYk05YlNGS1NQNnIKTXV3bG5xTlpSNXN0R2Zmb3Y3YVM3VWRvOGtLUDVRbW5hZGFGRitIWHVxdzJxNXFTK2tRTllQQlZHTE5mczYvdQpZYlN1enQrbmhPTWIwYWl0R1hBeWlZejhMaWdiVU53bEgyL1FOektvcTdYZlUxQjRKQXZWYnc0ZU80MEZLYWRWCjJycnBQb3NMYWNiSHBlSHpEZDcvQXY1UU1TM0l4OFZHRitNNEFUUGU3dmZyVUJ3SHFVT3JLMWdjNUVGb3ZNT2MKY1FiVDNPWFY3b05yWmtUU04yTnJyMGozek5wcUxBamJDUGJIOEtxclZPRGxIYUY2cFZpNWlSK1RubkoycDlyQwo4cTgvZ3VvL2t6cVFvcHcyclM0ajV1T1pIRy84bjJzTHJhUWdRS2RRNUE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                        serverPrivateKeyBase64 = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbW1iZXlrZlN6RGJSQkhWQVRuakRyTlplMk5RbXQ5STc5KzhmczBGdGJUTHM4QmdkCkdlZEdvSGxJWVZ6K2Nxak5ZVXQ3WFpVNjVjWE8vazY3TFpLMlRKaFB4V0ZBVzNKUFMvV1hOVVhOa1BmNHdYMEkKNnU2WCtQeXlWNjZVZ1VtOE1WTzh3ckRHRFJpaGdobFhTemR0ZVl5S2FhSkVKQmpxRUFpMnJBdnFNUmw1ZTIzVQppSlpzd29vcmJ3MUZjcEJpaWNPbHluU21XdjBTZmdxQm1LUCszUG5tUnRJVmFMV01RdS9rTlJyWk5wRHpIalF2CmYxRDZoWXVXTVVxQ2paTG5KY3pYWUF4bWxlMkhJdDNPNDFuSlZMMDBzdmJsWHhkUVc2Q2M2dE1YRlFhbW5NbmMKMzNLK2R6Wi81MlZsTmcvVXlZYzh6WXZFbnFFRzEyQXk3Ymh2SFFJREFRQUJBb0lCQUVsNC9qZGZxaTNIUC90UgpHRUsvTU00RVRLbjllbGNxMGFLUHhaUDFaRzc4TnNlaGtlZUxxSTRnYUpMOFA1Q3NSdDh2bmdyUVFuQ29pbkYxCllaaTBJYytkQXdpMzJIb3JrUlJpVDR2b0pZUUFtL3ptMU9HR25BYTlxTmdVbVZKVWxoc2E3ODN0ZExFeXNWaEoKV3NMT0kyZ2R1cGU5d1pNeno5M0ZaN2ZEQzdSRTM4MEFQaGZpK0h4YXVaeWFMWCtJZVRwSG9SWER4cEpXRWlhdQpxTERqblZlYlJKWHZSNC90VGNiNFE4MDdYZVFTckN2UU5UdkpBckJ5RWFSYVhselFqR2h1K2NKZzRNTXYwY3l5CjhBTkxMQmNIWjFFZEVtelBPMWhOQ2dVcitNZ2NKS2lERk9Yd3pHbmFMaC92WUtsVW1TVzlPMnBGdE9qcE5sZzkKM0xYdGUva0NnWUVBd3ptNVhaN01sYStHNjhMRG5CTXFwcDhLenpBVDZqTG52Y1plR05RU2xiVnFuVVlkdzRlYgpUMmd6L0RyWnlIekxsRVlEQ3F2Y1VRdVJQVGIyOU1hRnRRR0haN0RJUDJLa2wvV3h5alNJdTdJOXlaWjM4NVpMCmExbzlQZlhaSWxQZmlPdFpPbnpGTHczWG84S2J2UU9UOGVCZzNpcmwxYXMxaEYvdjNjQzFBbmNDZ1lFQXluZkEKVzdsKzEyUkpVY1ZQVjE1Mk9qNkxHcUJRWVZtTFdteTBObmZMOUVCRFlvbm9WY0tvT0VGWUE5ZW5FMEl5WWFvUwpYbDZzMXRmRC9QUWUxTG1NZlBMZ0s3aVIzV0xidjczZTdvUm1jVGp2d3VpVWhXRTRjbFVJWmZMNU43aW9SR0pUCldhRnR1YjlQMnJzWVc3T2hpMks0SWR5QzF0Zy9iemFTTWNmNlRBc0NnWUFleUpWZ0c5QXFzampXS0Nuc0RHR24KVUdERjl0RE5GeVhQbU4zeGtFODE2QnRkblZiSUpEUHJPNFVtK3Fpb29uVC9kbUs0WmcwaGdtOXVkYUpQU3BaKwp5alR0dHNSOHFqTkYrdW9EOW5DeEdCUUNHNFhpbFFwamJTRkhDZU1wTkl5RTdJZHZYNGxBT0RDT2svczJ2TCt4ClhpNG9HaCtQcDZXU3NBWUVzNFJYVlFLQmdCRFhFd1hPRVBIRFlxSE5nb0xtMVhpVXVTYzJ6Rmk4aE8yNWV1ZkkKNFFyb3lYSUp2R3hkcTNZNllTSzRyaW5ZNkszYzRuZzg4YTFROXZrMEtOaFNzbysxOTlWTEhiN0hPVFhpaWdkVwp0ZHFXL01JK2JCUUgrUlR4WTZodkpERnhSM1dncEFRaGZDbmw4ck5qdW12dUxmS1UvSEc4a0psa0ZTcWY1RnNGCm9oanZBb0dBRElmV1lxQ05qZ1hzUnRzMlFLY09wTFNxdTN3RTArUGdjZU5lbm1LRERRcnZJMkNuRzBzcFU4WkMKbGFwc09pU01MMHhlYUN0U2s2VG1sYUlhM1JGcFRpWEdVUzFNNFZQZFIxSXZwbmtia28wbjAvMncwK1dLRlB3aAptcDZaU1N4RVRHVXllbXQ4SUYwSjA2RENRSTl3aENCdkZpSHNBbURKeWpUdXpSU3cyYjQ9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                        serverCertificateBase64 = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMRENDQWhTZ0F3SUJBZ0lJQjFwYW94UUhEZlF3RFFZSktvWklodmNOQVFFTEJRQXdJREVlTUJ3R0ExVUUKQXhNVmJXbHVhV05oSUhKdmIzUWdZMkVnTldRek16WmpNQjRYRFRJek1URXlPREUwTURJek0xb1hEVEkxTVRJeQpPREUwTURJek0xb3dGREVTTUJBR0ExVUVBeE1KYkc5allXeG9iM04wTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBbW1iZXlrZlN6RGJSQkhWQVRuakRyTlplMk5RbXQ5STc5KzhmczBGdGJUTHMKOEJnZEdlZEdvSGxJWVZ6K2Nxak5ZVXQ3WFpVNjVjWE8vazY3TFpLMlRKaFB4V0ZBVzNKUFMvV1hOVVhOa1BmNAp3WDBJNnU2WCtQeXlWNjZVZ1VtOE1WTzh3ckRHRFJpaGdobFhTemR0ZVl5S2FhSkVKQmpxRUFpMnJBdnFNUmw1CmUyM1VpSlpzd29vcmJ3MUZjcEJpaWNPbHluU21XdjBTZmdxQm1LUCszUG5tUnRJVmFMV01RdS9rTlJyWk5wRHoKSGpRdmYxRDZoWXVXTVVxQ2paTG5KY3pYWUF4bWxlMkhJdDNPNDFuSlZMMDBzdmJsWHhkUVc2Q2M2dE1YRlFhbQpuTW5jMzNLK2R6Wi81MlZsTmcvVXlZYzh6WXZFbnFFRzEyQXk3Ymh2SFFJREFRQUJvM1l3ZERBT0JnTlZIUThCCkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIKL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVWFVpblJ5a0lJUUpGMHp6cXVHVDRJUlhFQlZzd0ZBWURWUjBSQkEwdwpDNElKYkc5allXeG9iM04wTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBRjhSY3g0ZTBiTFNkdFZ2NC9VV1lhCjYrYk13WTQyUElVY2ZwOVVvdzVtelhSU1kwZjRDVWRWd3FySXhUQ3oxNnNFaEZMZU1WQjhRcGlXUU1BMXN1QTUKQkZlZGZCWWlZbCtMUU9yRlpUbkdDU0NVaVlSc1ZUYmJvKzFmbEpMZUxyQUhCS1NiNkMwQkJsbGlBcXFRRXhHRwp6NlorT1hiMlcxQW9oM21xdFRjeHBuWHZjVEtKM2hXRGI0RHMzckJxMnFhTVU1c1lVM1U5RHZYclhYL2JjVmpZCnpVY0h3aXZwT05LaXp4S2RGOTN5MW1CRWdCRXJwcGhIak1xTGZHUGV1YUg1UjhlOGExQnk3ajVtYlhEa2xDZ0UKMTVxWVZxaDJJUjIxUzdRV1RydlkvQ21DazE2bkZ4dmVtNWUxT2VVQ01GRDBMVllxOGZaVVR5RFZueG42M2svYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
                    )
                )
            )
        )
        val sessionClient = Session.open(Config.from(configDataClient)).getOrThrow()
        val sessionServer = Session.open(Config.from(configDataServer)).getOrThrow()
        var receivedSample: Sample? = null
        val subscriber = sessionClient.declareSubscriber(TEST_KEY_EXP).with { sample -> receivedSample = sample }.res().getOrThrow()

        val value = Value("encrypted_message")
        sessionServer.put(TEST_KEY_EXP, value).res()
        Thread.sleep(1000)

        subscriber.close()
        sessionClient.close()
        sessionServer.close()

        assertNotNull(receivedSample)
        assertEquals(receivedSample!!.value, value)
    }
}
